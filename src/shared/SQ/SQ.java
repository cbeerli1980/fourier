// Generated by Selenium IDE
package shared.SQ;
import org.junit.Test;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.Alert;
import org.openqa.selenium.StaleElementReferenceException;
import java.lang.*;
import java.util.*;
import java.util.function.*;
import java.util.List;
import java.util.stream.*;
import java.util.stream.Collectors;

import shared.Session;
import shared.Environment;
import shared.SQ.SQ;

public class SQ
{
  static ArrayList<String> SPL,TPL,getUniquePLfromSDproductTable;
  public static WebElement SDproductsTable;
  public static List<WebElement> assetsLineItems;
  public static int sleepTimeSQ = Environment.get.sleepTime("SQ");

  @Test
  public static String formatTitle(String title)
  {
    if(!title.endsWith(" N") && !title.endsWith(" ORD") && !title.endsWith(" ADR") && !title.endsWith(" CL A") && !title.endsWith(" PRF") && !title.endsWith(" REP") && !title.endsWith(" AG") && !title.endsWith(" N.V.") && !title.endsWith(" PS") && !title.endsWith(" GS") && !title.endsWith(" GDR") && !title.endsWith(" CL") && !title.endsWith(" GROUP O"))
    {
      title = title+" ORD";
    }
    return title;
  }

  public static String removeSpecialCharacters(String title)
  {
    if(title.contains("'"))
    {
      title = title.replace("'"," ");
    }

    if(title.contains(" -B-"))
    {
      title = title.replace(" -B-","");
    }

    if(title.contains("&"))
    {
      title = title.replace("&"," ");
    }
    return title;
  }

  @Test
  public static String getType(String title)
  {
    String[] commoditiesList = Environment.get.list("Commodities").split(",");
    String[] indicesList = Environment.get.list("Indices").split(",");
    String[] currenciesList = Environment.get.list("Currencies").split(",");
    String[] basketList = Environment.get.list("Basket").split(",");

    String type = "stock";
    for(String eCommodities : commoditiesList)
    {
      if(title.contains(eCommodities))
      {
        type = "commoditity";
      }
    }

    for(String eIndices : indicesList)
    {
      if(title.contains(eIndices))
      {
	type = "index";
      }
    }

    for(String eIndices : basketList)
    {
      if(title.contains(eIndices))
      {
	type = "basket";
      }
    }

    for(String eCurrencies : currenciesList)
    {
      if(title.contains(eCurrencies))
      {
	type = "currency";
      }
    }
    return type;
  }

  @Test
  public static String[] getCurrentAssetsList(WebDriver driver)
  {
    System.out.println("SQ: getting currentAssetsList");
    assetsLineItems = driver.findElements(By.xpath(".//*[@id='assets-table']/tbody/tr"));
    int i=0;
    String[] currentAssetsList = new String[assetsLineItems.size()-4];
    for (WebElement assetLineItem : assetsLineItems)
    {
      String[] tmpStringArray = assetLineItem.getText().split("\n");
      for ( String tmpString : tmpStringArray )
      {
        if ( tmpString.length() > 68 )
        {
          currentAssetsList[i] = tmpString;
          i++;
        }
      }
    }
    System.out.println("SQ: got currentAssetsList done");
    return currentAssetsList;
  }

  @Test
  public static void goToPersonalPage(WebDriver driver)
  {
    try
    {
      driver.switchTo().defaultContent();
      SQframes.setSQrequest(driver);
      driver.findElement(By.id("row_127_0")).click();
    }
    catch(Exception e)
    {
      System.out.println("goToPersonalPage() failed: id=row_127_0");
    }
  }

  @Test
  public static void deleteSQtab(String tabName,WebDriver driver)
  {
    try
    {
      System.out.println("SQ: deleting " + tabName);
      driver.findElement(By.linkText("Alle Seiten")).click();
      WebElement allSQtabsTable = driver.findElement(By.id("p"));
      List<WebElement> rows = allSQtabsTable.findElements(By.tagName("tr"));
      int j=1;
      for(int i=1;i<rows.size();i++)
      {
        List<WebElement> columns = rows.get(i).findElements(By.tagName("td"));
        if(columns.get(2).getText().equals(tabName))
        {
          columns.get(1).findElement(By.xpath("//a[4]")).click();
          Alert al = driver.switchTo().alert();
          al.accept();
          System.out.println("SQ: deleted " + tabName);
          j=0;
	}
      }
      if(j == 1)
      {
        System.out.println("SQ: not tab found to delete " + tabName);
      } 
    }
    catch(StaleElementReferenceException e)
    {
      System.out.println("SQ: tabs list table refreshed");
    }
  }

  @Test
  public static void createSQtab(String tabName,WebDriver driver)
  {
    while(true)
    {
      try
      {
        System.out.println("SQ: creating tab " + tabName);
        driver.findElement(By.cssSelector(".newTab")).click();
        driver.findElement(By.id("page_name")).sendKeys(tabName);
        driver.findElement(By.linkText("Speichern")).click();
        System.out.println("SQ: created tab " + tabName);
      }
      catch(Exception e)
      {
        System.out.println("createSQtab() failed: Button Trading Account");
        Session.tearDownOnError(driver);
      }
    }
  }

  @Test
  public static void selectSQtab(String tabName,WebDriver driver)
  {
    System.out.println("SQ: selecting tab " + tabName);
    while(true)
    {
      try
      {
        try
        {
          WebElement SQtypeList = driver.findElement(By.id("rbTabnav"));
          List<WebElement> tabs = SQtypeList.findElements(By.tagName("a"));
          for(int i=1;i<tabs.size();i++)
          {
            try
            {
              if(tabs.get(i).getText() == "tabName"){tabs.get(i).click();}
            }
            catch(Exception e)
            {
              System.out.println("selectSQtab failed: find tab " + tabName);
              Session.tearDownOnError(driver);
            }
          }
          System.out.println("SQ: selected tab " + tabName);
        }
        catch(Exception e)
        {
          System.out.println("selectSQtab failed: eiter id='Tabnav' or tagName='a'");
          Session.tearDownOnError(driver);
        }
        System.out.println("SQ: selected tab " + tabName);
      }
      catch(Exception e)
      {
        System.out.println("selectSQtab failed: tabname: " + tabName);
        Session.tearDownOnError(driver);
      }
    }
  }

  @Test
  public static void goToSQhome(WebDriver driver)
  {
    while(true)
    {
      try
      {
        driver.switchTo().defaultContent();
        SQframes.setSQhnav(driver);
        driver.findElement(By.xpath("//span[text()='Trading Account']")).click();
      }
      catch(Exception e)
      {
        System.out.println("goToSQhome() failed: Button Trading Account");
        Session.tearDownOnError(driver);
      }
    }
  }

  @Test
  public static String getISIN(String title,WebDriver driver)
  {
    ArrayList<String> ISINlist = new ArrayList<String>();
    String ISIN = "" ;
    try
    {
      SQframes.setSQsqmain(driver);
      WebElement ss = driver.findElement(By.id("search_underlying"));
      ss.clear();
      ss.click();
      ss.sendKeys(title);
      ss.sendKeys(" ");
    }
    catch(Exception e)
    {
      System.out.println("getISIN(): failed to find Searchfield");
      ISIN="void";
    }

    try
    {
      WebElement searchResultsList = driver.findElement(By.id("search-results"));
      List<WebElement> WebElementISINs = searchResultsList.findElements(By.xpath(".//table/tbody/tr"));

      for(WebElement WebElementISIN : WebElementISINs)
      {
        ISIN = WebElementISIN.getAttribute("id").split("_")[0];
        if(!ISINlist.contains(ISIN))
        {
          ISINlist.add(ISIN);
        }
      }
      String maxVal = ISINlist.stream()
        .reduce(BinaryOperator.maxBy((o1, o2) -> Collections.frequency(ISINlist, o1) -
           Collections.frequency(ISINlist, o2))).orElse(null);
  
      ISIN = maxVal;
      if(ISIN.isEmpty()){ISIN = "void";System.out.println("getISIN(): failed, result empty "+title);}
    }
    catch(Exception e)
    {
      System.out.println("getISIN(): failed "+title);
      ISIN = "void";
    }
  
    System.out.println("getISIN(): title: "+title+" isin: "+ISIN);
    return ISIN;
  }

  @Test
  public static void addSPLtoTPL(int sleepTime,WebDriver driver)
  {
    try
    {
      for(String elementSPL : getUniquePLfromSDproductTable(sleepTime,driver))
      {
        if(!TPL.contains(elementSPL))
        {
	  System.out.println("blah");
          TPL.add(elementSPL);
        }
      }
    }
    catch(Exception o)
    {
      System.out.println("SQ: failed to add SPL to TPL");
    }
  }

  @Test
  public static void goToSDall(WebDriver driver)
  {
//    driver.switchTo().defaultContent();
    SQframes.setSQrequest(driver);
    driver.findElement(By.id("row_247_0")).click();
    driver.switchTo().defaultContent();
    SQframes.setSQsqmain(driver);
    driver.findElement(By.linkText("Zu den Swiss DOTS Produkten")).click();
  }

  @Test
  public static void clickNextSDproductTable(WebDriver driver)
  {
    try
    {
      WebElement nextButton = driver.findElement(By.linkText(">"));
      int ret=1;
      if (nextButton.isEnabled()){nextButton.click();ret=0;}
      else if(!nextButton.isEnabled()){System.out.println("unable to click nextButton ad SDproductTable");}
    }
    catch(Exception e)
    {
      System.out.println("SQ: stale reference object detected");
      System.out.println(e);
      Session.tearDownOnSuccess(driver);
    }
  }

  @Test
  public static ArrayList<String> getUniquePLfromSDproductTable(int sleepTime,WebDriver driver)
  {
    SPL = new ArrayList<String>();
    try
    {
      SDproductsTable = driver.findElement(By.id("quote"));
      List<WebElement> rows = SDproductsTable.findElements(By.tagName("tr"));
      for(int i=1;i<=driver.findElements(By.xpath(".//*[@id='quote']/tbody/tr")).size();i++)
      {
        List<WebElement> columns = rows.get(i).findElements(By.tagName("td"));
        if(!SPL.contains(columns.get(1).getText()))
        {
          SPL.add(columns.get(1).getText());
        }
      }
      System.out.println("getUniquePLfromSDproductTable(): successful");
    }
    catch(Exception e)
    {
      System.out.println("getUniquePLfromSDproductTable(): failed");
    }
    return SPL;
  }

  @Test
  public static void goToSymbolPage(String titleSQ,WebDriver driver)
  {
    SQframes.setSQrequest(driver);
    driver.findElement(By.id("symbols")).clear();
    driver.findElement(By.id("symbols")).sendKeys(titleSQ);
    driver.findElement(By.id("symbols")).sendKeys(Keys.ENTER);
  }

  @Test
  public static String getSymbol(WebDriver driver)
  {
    String symbol;
    try
    {
      SQframes.setSQsqmain(driver);
      symbol = driver.findElement(By.xpath(".//*[@class='Breadcrumbs__current']")).getText();
      if(symbol.contains("("))
      {
        symbol = symbol.split("\\(")[1];
        symbol = symbol.split("\\)")[0];
        return symbol;
      }
      else
      {
        return symbol;
      }
    } 
    catch(Exception e)
    {
      System.out.println("bluh");
      return "void";
    }
  }
}
