// Generated by Selenium IDE
package shared;
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.*;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.Point;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.firefox.FirefoxProfile;
import org.openqa.selenium.firefox.ProfilesIni;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.JavascriptExecutor;
import java.util.*;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.concurrent.TimeUnit;

public class Session 
{
  public static Map<String, Object>     vars;
  public static WebDriver               driver;

  public static Boolean openTab(WebDriver driver)
  {
    try
    {
      ((JavascriptExecutor) driver).executeScript("window.open()");
      return true;
    }
    catch(Exception e)
    {
      System.out.println("openTab(): failed");
      return false;
    }
  }

  public static ArrayList<String> getTabList(WebDriver driver)
  {
    ArrayList<String> tabs = new ArrayList<String>();
    try
    {
      tabs = new ArrayList<String>(driver.getWindowHandles());
      return tabs;
    }
    catch(Exception e)
    {
      System.out.println("getTabList(): failed");
      return tabs;
    }
  }

  public static Boolean switchToTabByNumber(int number,WebDriver driver)
  {
    ArrayList<String> tabs = getTabList(driver);
    try
    {
      driver.switchTo().window(tabs.get(number));
      System.out.println("switchToTabByNumber(): "+number);
      return true;
    }
    catch(Exception e)
    {
      System.out.println("switchToTab(): failed");
      return false;
    }
  }

  public static int getTabNumberByName(String searchTabName,WebDriver driver)
  {
    ArrayList<String> tabs = getTabList(driver);
    int tabsCount = tabs.size();

    int i=0,j=0;
    for (String windowHandle : driver.getWindowHandles())
    {
      driver.switchTo().window(windowHandle);
      String existingTabName = driver.getTitle().split(" -")[0];
      System.out.println("existingTabName: "+existingTabName+" searchTabName: "+searchTabName+"|");
      if(searchTabName.contains(existingTabName))
      {
        j=i; 
      }
      i++;
    }
    return j;
  }

  @Before
  public static WebDriver setUp(String headlessMode)
  {
    JavascriptExecutor js;
    js = (JavascriptExecutor) driver;

    vars = new HashMap<String, Object>();
    FirefoxOptions options = new FirefoxOptions();

    if(headlessMode.equals("-headless")){options.addArguments("-headless");}

    driver = new FirefoxDriver(options);
    driver.manage().timeouts().implicitlyWait(5,TimeUnit.SECONDS);

    return driver;
  }

  @Before
  public static WebDriver setUpProfile(String profileName,String headlessMode)
  {
    JavascriptExecutor js;
    js = (JavascriptExecutor) driver;

    vars = new HashMap<String, Object>();
    ProfilesIni profileIni = new ProfilesIni();
    FirefoxOptions options = new FirefoxOptions();

    if(profileName!="")
    {
      FirefoxProfile profile = profileIni.getProfile(profileName);
      options.setProfile(profile);
    }

    if(headlessMode.equals("-headless")){options.addArguments("-headless");}

    driver = new FirefoxDriver(options);
    driver.manage().timeouts().implicitlyWait(15,TimeUnit.SECONDS);

    return driver;
  }

  @Test
  public static void getBaseURL(String baseURL)
  {
    try{driver.get(baseURL);}catch(Exception e){System.out.println(baseURL + " not found");}
  }

  @After
  public static void tearDownOnError(WebDriver driver)
  {
    driver.quit();
    System.out.println("error, shutting down");
//    System.exit(1);
  }

  @After
  public static void tearDownOnSuccess(WebDriver driver)
  {
    driver.quit();
    System.out.println("all done, shutting down");
    System.exit(0);
  }

  public static void timeout(Integer sleepTime)
  {
    try
    {
      Thread.sleep(sleepTime);
    }
    catch (InterruptedException e)
    {
      e.printStackTrace();
    }
  }
}
